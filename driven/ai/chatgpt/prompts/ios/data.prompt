Primero de todo extrae cuantos tags tiene este swagger. A partir de este momento estos tags son la base para construir
el resto de cosas. Por cada tag se debe de crear lo siguiente:

Utilizando la información generada anteriormente. Genera la clase repositorio basado en el protocolo generado anteriormente.
Genera los protocolos de los datasources y su implementación con las llamadas al endpoint definido en el swagger.

Cada uno de las clases o protocolos deben de estar en un bloque de código distinto. Encima del inicio del bloque tiene que
indicarse el nombre del fichero (#####Directorio/NombreFichero) y la carpeta a la que corresponde. Las carpetas son:
Data/DataSources, Data/Repositories

Quiero que todas las funciones sean con async throws.

Se debe de crear los dtos necesarios para cada llamada en una carpeta dto dentro del datasource correspondiente al tag
correspondiente

y la implementación de cada datasource tiene que seguir esta estructura. Cada tag debe de tener su datasource protocol
y su implementación. La implementación debe estar basada en:

final class DaysAtOfficeDataSource: DaysAtOfficeDataSourceProtocol {

    let network: Network

    init(network: Network) {
        self.network = network
    }

    func fetchAttendees(with parameters: [String : Any]) async throws -> [AttendeeDTO] {
        let endpoint = Endpoint(path: "user/office/day", httpMethod: .post, parameters: parameters)
        return try await network.loadAuthorized(this: endpoint,
                                                of: [AttendeeDTO].self)
    }
}

El repositorio de cada tag es el que tiene que contener un mapper para convertir los objetos de DTO a entidad o al revés.
como este ejemplo:


class DaysAtOfficeRepository {
    private let dataSource: DaysAtOfficeDataSourceProtocol

    init(dataSource: DaysAtOfficeDataSourceProtocol) {
        self.dataSource = dataSource
    }
}

extension DaysAtOfficeRepository: DaysAtOfficeRepositoryProtocol {
    func fetchAttendees(with parameters: [String : Any]) async throws -> [Attendee] {
        let attendeeDTO = try await dataSource.fetchAttendees(with: parameters)
        return attendeeDTO.compactMap { Attendee(email: $0.email,
                                                 firstName: $0.firstName,
                                                 lastName: $0.lastName,
                                                 image: $0.image?.toDomain(),
                                                 tech: $0.tech?.toDomain(),
                                                 id: $0.id)
        }
    }
}

fileprivate extension ImageDTO {
    func toDomain() -> Images {
        return Images(
            file: self.file,
            thumbnail: self.thumbnail,
            midsize: self.midsize,
            fullsize: self.fullsize
        )
    }
}

fileprivate extension TechDTO {
    func toDomain() -> Tech {
        return Tech(name: self.name, image: self.image?.toDomain(), color: self.color)
    }
}


Debes crear todos los ficheros para todos los tags

├── Data/
│   ├── DataSource/
│   │   ├── Auth/
│   │       ├── Remote/
│   │           ├── AuthRemoteDataSourceProtocoñ
│   │           ├── AuthenticationApi/
│   │                ├── AuthRemoteDataSource
│   │                ├── dto/
│   │                    ├── ChangePasswordDTO
│   │                    ├── EmailDTO
│   │
│   ├── Repository/
│           ├── Auth/
│               ├── AuthRepository